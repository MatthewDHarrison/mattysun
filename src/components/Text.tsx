/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import {
  useGLTF,
  CurveModifier,
  Text3D,
  CurveModifierRef,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

const yellow = "#FDD022";
const pink = "#E7749E";
const white = "#ffffff";
const blue = "#0196D9";
const orange = "#D97945";

interface IAprilTextProps {
  colors: string[];
  text: string;
}

const AprilText = ({ colors, text }: IAprilTextProps) => {
  const textWithKerning = text.split("").map((letter) => {
    switch (letter) {
      case "a":
        return { letter, kerning: 0.27 };
      case "p":
        return { letter, kerning: 0.27 };
      case "r":
        return { letter, kerning: 0.22 };
      case "i":
        return { letter, kerning: 0.15 };
      case "l":
        return { letter, kerning: 0.16 };
      case "u":
        return { letter, kerning: 0.27 };
      case "c":
        return { letter, kerning: 0.27 };
      case "k":
        return { letter, kerning: 0.27 };
      case "s":
        return { letter, kerning: 0.3 };
      default:
        return { letter, kerning: 0.2 };
    }
  });

  const textWithOffsets = textWithKerning.map((letter, index) => {
    const offset = textWithKerning
      .slice(0, index)
      .reduce((acc, curr) => acc + curr.kerning, 0);
    return { ...letter, offset };
  });

  return (
    <group>
      {textWithOffsets.map((letter, index) => (
        <AprilLetter
          key={index}
          color={colors[index % colors.length]}
          x={-letter.offset}
          text={letter.letter}
        />
      ))}
    </group>
  );
};

interface IAprilLetterProps {
  color: string;
  x: number;
  text: string;
}
const AprilLetter = ({ color, x, text }: IAprilLetterProps) => {
  return (
    <Text3D
      font="/fonts/Videophreak_Regular.json" // Make sure to use a valid font path
      scale={-0.3}
      bevelEnabled
      bevelThickness={0.05}
      bevelSize={0.01}
      bevelOffset={0}
      bevelSegments={64}
      position={[x, 0, 0]}
      rotation={[0, 0, 0]} // Rotate the text to correct orientation
    >
      {text}
      <meshPhysicalMaterial color={color} />
    </Text3D>
  );
};

function JoshText() {
  const textRef = useRef<THREE.Mesh>(null);

  return (
    <group>
      <Text3D
        ref={textRef}
        font="/fonts/helvetiker_regular.typeface.json" // Make sure to use a valid font path
        size={-1.5}
        bevelEnabled
        bevelThickness={0.05}
        bevelSize={0.01}
        bevelOffset={0}
        bevelSegments={64}
        rotation={[0, 0, 0]} // Rotate the text to correct orientation
        position={[12, 20, 0]}
      >
        @joshismusic is a poo man
        <meshPhysicalMaterial color="blue" reflectivity={2} />
      </Text3D>
    </group>
  );
}

export const TextGroup = () => {
  const textRef = useRef<THREE.Group<THREE.Object3DEventMap>>(null);
  const textRef2 = useRef<THREE.Group<THREE.Object3DEventMap>>(null);
  // every frame, slightly alter the position and z axis rotation of the text

  useEffect(() => {
    if (!textRef2.current) return;
    textRef2.current.rotation.y = -0.7;
    textRef2.current.rotation.z = Math.PI;
  }, []);

  useFrame((state, delta) => {
    const t = state.clock.getElapsedTime();
    if (!textRef.current) return;
    textRef.current.position.y = -0.5 + Math.sin(t * 3) * 5;
    textRef.current.rotation.z = Math.PI + Math.sin(t * 2) * 0.05;
  });

  return (
    <>
      <group ref={textRef} position={[-1.35, -0.5, 0.3]} scale={10}>
        <JoshText />
      </group>
      <group ref={textRef2} position={[-1.35, -0.5, 0.3]} scale={10}>
        <Text3D
          font="/fonts/Faustina Light_Italic.json" // Make sure to use a valid font path
          size={-1}
          bevelEnabled
          bevelThickness={0.05}
          bevelSize={0.01}
          bevelOffset={0}
          bevelSegments={64}
          rotation={[0, 0, 0]} // Rotate the text to correct orientation
          position={[-10, 0, 0]}
        >
          "livin' in the new world
          <meshPhysicalMaterial color="pink" reflectivity={2} />
        </Text3D>
        <Text3D
          font="/fonts/Faustina Light_Italic.json" // Make sure to use a valid font path
          size={-1}
          bevelEnabled
          bevelThickness={0.05}
          bevelSize={0.01}
          bevelOffset={0}
          bevelSegments={64}
          rotation={[0, 0, 0]} // Rotate the text to correct orientation
          position={[-12, 1.5, 0]}
        >
          with an old soul"
          <meshPhysicalMaterial color="pink" reflectivity={2} />
        </Text3D>
      </group>
    </>
  );
};

useGLTF.preload("/models/scene-v1.glb");
