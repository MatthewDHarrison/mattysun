/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { CameraControls, useGLTF } from '@react-three/drei'
import { useFrame, useLoader, useThree } from '@react-three/fiber'
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'
import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'
import * as THREE from 'three'
import helveticaRegular from 'three/examples/fonts/helvetiker_regular.typeface.json'
import { Mesh } from 'three'

const deg2Rad = (deg: number) => {
  return deg * (Math.PI / 180)
}

export const Model = (props: any) => {
  const { camera } = useThree()

  camera.position.set(0, 0, 50) // Set position like this
  camera.rotateX(deg2Rad(180)) // Rotate like this
  camera.lookAt(new THREE.Vector3(0, 0, 0)) // Set look at coordinate like this
  camera.layers.enable(1)

  const groupRef = useRef()
  const { nodes } = useGLTF('/models/scene-v1.glb')
  const cloudMaterial = new THREE.MeshStandardMaterial({ color: 'white' })
  const cloud1 = useRef<Mesh>(null!)
  const cloud2 = useRef<Mesh>(null!)
  const cameraRef = useRef(40)

  const moveSpeedRef = useRef(10)
  const sunMaterial = new THREE.MeshBasicMaterial({ color: 'orange' })

  useEffect(() => {
    camera.layers.enable(0)
    if (cloud1.current && cloud2.current) {
      cloud1.current.position.set(2, 0.5, 20)
      cloud2.current.position.set(-4, 0.5, 19)
    }
  }, [])

  // every frame, move the sun around the cloud
  useFrame((state, delta) => {
    const dist = delta * 2.2 * moveSpeedRef.current
    moveSpeedRef.current = moveSpeedRef.current * 0.98
    if (cameraRef.current > 30) {
      cameraRef.current = cameraRef.current - dist / 2.2
      state.camera.position.lerp(
        new THREE.Vector3(0, 0, cameraRef.current),
        0.1,
      )
    }

    if (!cloud1.current || !cloud2.current) return
    const cloud1Pos = cloud1.current.position
    cloud1Pos.x = cloud1Pos.x + dist
    if (cloud1Pos.x > 30) cloud1Pos.x = 30

    const cloud2Pos = cloud2.current.position
    cloud2Pos.x = cloud2Pos.x - dist
    if (cloud2Pos.x < -30) cloud2Pos.x = -30
  })

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <directionalLight color="white" position={[2, 0.5, -1]} layers={0} />
      {/* <CameraControls minPolarAngle={0} maxPolarAngle={Math.PI / 1.6} /> */}

      <mesh
        ref={cloud1}
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
      />
      <mesh
        ref={cloud2}
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(-15, 0.5, -19)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(20, 2.5, -19)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={3}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(0, 5.5, -25)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={3}
        rotation={[deg2Rad(-66), deg2Rad(0), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(-16, 5.5, -30)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-66), deg2Rad(50), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(-22, 5.5, 0)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={2}
        rotation={[deg2Rad(-96), deg2Rad(0), deg2Rad(0)]}
        layers={0}
        position={new THREE.Vector3(20, 0, 2)}
      />
      <mesh
        geometry={(nodes.Cloud__0 as THREE.Mesh).geometry}
        material={cloudMaterial}
        scale={3}
        rotation={[deg2Rad(-96), deg2Rad(10), deg2Rad(-10)]}
        layers={0}
        position={new THREE.Vector3(25, 3, -15)}
      />
      <mesh
        position={[0, 0, 0]}
        scale={9}
        geometry={(nodes.Sphere_sun_0 as THREE.Mesh).geometry}
        material={sunMaterial}
        layers={0}
      />
    </group>
  )
}

useGLTF.preload('/models/scene-v1.glb')
